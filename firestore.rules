/**
 * @fileOverview Firestore Security Rules for a dynamic healthcare app.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model, where each registered entity (patient, doctor, medical store, lab, ambulance, hospital)
 * can only be created, read, updated, or deleted by the authenticated user who owns that entity.
 *
 * Data Structure:
 * The Firestore database is structured with top-level collections for each entity type:
 * /patients/{patientId}
 * /doctors/{doctorId}
 * /medicalStores/{medicalStoreId}
 * /labs/{labId}
 * /ambulances/{ambulanceId}
 * /hospitals/{hospitalId}
 *
 * Key Security Decisions:
 * - User-owned entities are restricted to CRUD operations only by their respective owners.
 * - Listing of user entities is allowed only for authenticated owners.
 * - Data validation is limited to authorization-critical fields, allowing flexible data shapes during prototyping.
 * - The rule set prioritizes authorization and access control and assumes that all data is private to the
 *   respective owner unless explicitly stated otherwise.
 *
 * Denormalization for Authorization:
 * - The document ID is used as the ownership identifier and is enforced in both creation and updates.
 *
 * Structural Segregation:
 * - All entities are stored in separate top-level collections, making authorization simpler and more performant.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access control for patient profiles.
     * @path /patients/{patientId}
     * @allow (create) - Authenticated user creates their own profile: request.auth.uid == patientId
     * @allow (get, list) - Authenticated user can read their own profile.
     * @allow (update, delete) - Authenticated user can modify their own profile.
     * @deny (create) - Non-authenticated user attempts to create a profile.
     * @deny (update, delete) - Authenticated user attempts to modify someone else's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /patients/{patientId} {
      // Authentication check
      allow get, list: if isSignedIn() && isOwner(patientId);
      allow create: if isSignedIn() && isOwner(patientId) && request.resource.data.id == patientId;
      allow update: if isSignedIn() && isExistingOwner(patientId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(patientId);
    }

    /**
     * @description Manages access control for doctor profiles.
     * @path /doctors/{doctorId}
     * @allow (create) - Authenticated user creates their own profile: request.auth.uid == doctorId
     * @allow (get, list) - Authenticated user can read their own profile.
     * @allow (update, delete) - Authenticated user can modify their own profile.
     * @deny (create) - Non-authenticated user attempts to create a profile.
     * @deny (update, delete) - Authenticated user attempts to modify someone else's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /doctors/{doctorId} {
      allow get, list: if isSignedIn() && isOwner(doctorId);
      allow create: if isSignedIn() && isOwner(doctorId) && request.resource.data.id == doctorId;
      allow update: if isSignedIn() && isExistingOwner(doctorId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(doctorId);
    }

    /**
     * @description Manages access control for medical store profiles.
     * @path /medicalStores/{medicalStoreId}
     * @allow (create) - Authenticated user creates their own profile: request.auth.uid == medicalStoreId
     * @allow (get, list) - Authenticated user can read their own profile.
     * @allow (update, delete) - Authenticated user can modify their own profile.
     * @deny (create) - Non-authenticated user attempts to create a profile.
     * @deny (update, delete) - Authenticated user attempts to modify someone else's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /medicalStores/{medicalStoreId} {
      allow get, list: if isSignedIn() && isOwner(medicalStoreId);
      allow create: if isSignedIn() && isOwner(medicalStoreId) && request.resource.data.id == medicalStoreId;
      allow update: if isSignedIn() && isExistingOwner(medicalStoreId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(medicalStoreId);
    }

    /**
     * @description Manages access control for lab profiles.
     * @path /labs/{labId}
     * @allow (create) - Authenticated user creates their own profile: request.auth.uid == labId
     * @allow (get, list) - Authenticated user can read their own profile.
     * @allow (update, delete) - Authenticated user can modify their own profile.
     * @deny (create) - Non-authenticated user attempts to create a profile.
     * @deny (update, delete) - Authenticated user attempts to modify someone else's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /labs/{labId} {
      allow get, list: if isSignedIn() && isOwner(labId);
      allow create: if isSignedIn() && isOwner(labId) && request.resource.data.id == labId;
      allow update: if isSignedIn() && isExistingOwner(labId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(labId);
    }

    /**
     * @description Manages access control for ambulance profiles.
     * @path /ambulances/{ambulanceId}
     * @allow (create) - Authenticated user creates their own profile: request.auth.uid == ambulanceId
     * @allow (get, list) - Authenticated user can read their own profile.
     * @allow (update, delete) - Authenticated user can modify their own profile.
     * @deny (create) - Non-authenticated user attempts to create a profile.
     * @deny (update, delete) - Authenticated user attempts to modify someone else's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /ambulances/{ambulanceId} {
      allow get, list: if isSignedIn() && isOwner(ambulanceId);
      allow create: if isSignedIn() && isOwner(ambulanceId) && request.resource.data.id == ambulanceId;
      allow update: if isSignedIn() && isExistingOwner(ambulanceId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(ambulanceId);
    }

    /**
     * @description Manages access control for hospital profiles.
     * @path /hospitals/{hospitalId}
     * @allow (create) - Authenticated user creates their own profile: request.auth.uid == hospitalId
     * @allow (get, list) - Authenticated user can read their own profile.
     * @allow (update, delete) - Authenticated user can modify their own profile.
     * @deny (create) - Non-authenticated user attempts to create a profile.
     * @deny (update, delete) - Authenticated user attempts to modify someone else's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /hospitals/{hospitalId} {
      allow get, list: if isSignedIn() && isOwner(hospitalId);
      allow create: if isSignedIn() && isOwner(hospitalId) && request.resource.data.id == hospitalId;
      allow update: if isSignedIn() && isExistingOwner(hospitalId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(hospitalId);
    }

    //----------------------------------------------------------------------------------------------
    // Helper functions
    //----------------------------------------------------------------------------------------------

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document based on the document ID.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document and the document exists.  This is to prevent updates or deletes on non-existent documents.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}