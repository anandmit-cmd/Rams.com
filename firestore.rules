/**
 * @fileOverview
 * This ruleset enforces a strict user-ownership model for all data stored in Firestore.
 * Each top-level collection (patients, doctors, medicalStores, labs, ambulanceServices)
 * is designed to be accessed only by the entity with the matching ID.
 *
 * Data Structure:
 * All data is stored in top-level collections named after the entity type
 * (e.g., `/patients/{patientId}`, `/doctors/{doctorId}`).
 *
 * Key Security Decisions:
 * - No user listing is allowed. Listing is restricted to owners of the entity type.
 * - Data validation is minimal, focusing on authorization and relational integrity
 *   (e.g., ensuring the document ID matches the authenticated user's ID).
 * - Write operations are strictly controlled, requiring authentication and
 *   ownership validation.
 *
 * Denormalization for Authorization:
 *  - The document ID acts as the owner ID, which allows the rules to verify ownership
 *    via the `isOwner(entityId)` helper function. This avoids the need for additional
 *    `get()` calls to determine ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to patient data. Only the patient with the matching ID can read, update, or delete their own data.
     * @path /patients/{patientId}
     * @allow (create) - Authenticated user with UID 'patient123' can create a patient document at /patients/patient123.
     * @allow (get) - Authenticated user with UID 'patient123' can get their patient document at /patients/patient123.
     * @allow (update) - Authenticated user with UID 'patient123' can update their patient document at /patients/patient123.
     * @allow (delete) - Authenticated user with UID 'patient123' can delete their patient document at /patients/patient123.
     * @deny (create) - Authenticated user with UID 'doctor456' cannot create a patient document at /patients/patient123.
     * @deny (get) - Authenticated user with UID 'doctor456' cannot get the patient document at /patients/patient123.
     * @deny (update) - Authenticated user with UID 'doctor456' cannot update the patient document at /patients/patient123.
     * @deny (delete) - Authenticated user with UID 'doctor456' cannot delete the patient document at /patients/patient123.
     * @principle Enforces document ownership for all operations on patient data.
     */
    match /patients/{patientId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user's ID matches the patientId
      function isOwner(patientId) {
        return isSignedIn() && request.auth.uid == patientId;
      }

      // Helper function to check if the authenticated user is the existing owner
      function isExistingOwner(patientId) {
        return isOwner(patientId) && resource != null;
      }

      // Allow anyone to read the document if they are the owner
      allow get: if isOwner(patientId);
      allow list: if isOwner(patientId);

      // Allow create if the user is signed in and the patientId matches the authenticated user's ID.
      // Also validate that the document ID matches the patientId in the request.
      allow create: if isOwner(patientId) && request.resource.data.id == patientId;

      // Allow update if the user is signed in, the patientId matches the authenticated user's ID,
      // and the document already exists. Enforce immutability of the 'id' field.
      allow update: if isExistingOwner(patientId) && request.resource.data.id == resource.data.id;

      // Allow delete if the user is signed in, the patientId matches the authenticated user's ID,
      // and the document already exists.
      allow delete: if isExistingOwner(patientId);
    }

    /**
     * @description Manages access to doctor data. Only the doctor with the matching ID can read, update, or delete their own data.
     * @path /doctors/{doctorId}
     * @allow (create) - Authenticated user with UID 'doctor456' can create a doctor document at /doctors/doctor456.
     * @allow (get) - Authenticated user with UID 'doctor456' can get their doctor document at /doctors/doctor456.
     * @allow (update) - Authenticated user with UID 'doctor456' can update their doctor document at /doctors/doctor456.
     * @allow (delete) - Authenticated user with UID 'doctor456' can delete their doctor document at /doctors/doctor456.
     * @deny (create) - Authenticated user with UID 'patient123' cannot create a doctor document at /doctors/doctor456.
     * @deny (get) - Authenticated user with UID 'patient123' cannot get the doctor document at /doctors/doctor456.
     * @deny (update) - Authenticated user with UID 'patient123' cannot update the doctor document at /doctors/doctor456.
     * @deny (delete) - Authenticated user with UID 'patient123' cannot delete the doctor document at /doctors/doctor456.
     * @principle Enforces document ownership for all operations on doctor data.
     */
    match /doctors/{doctorId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user's ID matches the doctorId
      function isOwner(doctorId) {
        return isSignedIn() && request.auth.uid == doctorId;
      }

      // Helper function to check if the authenticated user is the existing owner
      function isExistingOwner(doctorId) {
        return isOwner(doctorId) && resource != null;
      }

      // Allow anyone to read the document if they are the owner
      allow get: if isOwner(doctorId);
      allow list: if isOwner(doctorId);

      // Allow create if the user is signed in and the doctorId matches the authenticated user's ID.
      // Also validate that the document ID matches the doctorId in the request.
      allow create: if isOwner(doctorId) && request.resource.data.id == doctorId;

      // Allow update if the user is signed in, the doctorId matches the authenticated user's ID,
      // and the document already exists. Enforce immutability of the 'id' field.
      allow update: if isExistingOwner(doctorId) && request.resource.data.id == resource.data.id;

      // Allow delete if the user is signed in, the doctorId matches the authenticated user's ID,
      // and the document already exists.
      allow delete: if isExistingOwner(doctorId);
    }

    /**
     * @description Manages access to medical store data. Only the medical store with the matching ID can read, update, or delete their own data.
     * @path /medicalStores/{medicalStoreId}
     * @allow (create) - Authenticated user with UID 'store789' can create a medical store document at /medicalStores/store789.
     * @allow (get) - Authenticated user with UID 'store789' can get their medical store document at /medicalStores/store789.
     * @allow (update) - Authenticated user with UID 'store789' can update their medical store document at /medicalStores/store789.
     * @allow (delete) - Authenticated user with UID 'store789' can delete their medical store document at /medicalStores/store789.
     * @deny (create) - Authenticated user with UID 'patient123' cannot create a medical store document at /medicalStores/store789.
     * @deny (get) - Authenticated user with UID 'patient123' cannot get the medical store document at /medicalStores/store789.
     * @deny (update) - Authenticated user with UID 'patient123' cannot update the medical store document at /medicalStores/store789.
     * @deny (delete) - Authenticated user with UID 'patient123' cannot delete the medical store document at /medicalStores/store789.
     * @principle Enforces document ownership for all operations on medical store data.
     */
    match /medicalStores/{medicalStoreId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user's ID matches the medicalStoreId
      function isOwner(medicalStoreId) {
        return isSignedIn() && request.auth.uid == medicalStoreId;
      }

      // Helper function to check if the authenticated user is the existing owner
      function isExistingOwner(medicalStoreId) {
        return isOwner(medicalStoreId) && resource != null;
      }

      // Allow anyone to read the document if they are the owner
      allow get: if isOwner(medicalStoreId);
      allow list: if isOwner(medicalStoreId);

      // Allow create if the user is signed in and the medicalStoreId matches the authenticated user's ID.
      // Also validate that the document ID matches the medicalStoreId in the request.
      allow create: if isOwner(medicalStoreId) && request.resource.data.id == medicalStoreId;

      // Allow update if the user is signed in, the medicalStoreId matches the authenticated user's ID,
      // and the document already exists. Enforce immutability of the 'id' field.
      allow update: if isExistingOwner(medicalStoreId) && request.resource.data.id == resource.data.id;

      // Allow delete if the user is signed in, the medicalStoreId matches the authenticated user's ID,
      // and the document already exists.
      allow delete: if isExistingOwner(medicalStoreId);
    }

    /**
     * @description Manages access to lab data. Only the lab with the matching ID can read, update, or delete their own data.
     * @path /labs/{labId}
     * @allow (create) - Authenticated user with UID 'lab101' can create a lab document at /labs/lab101.
     * @allow (get) - Authenticated user with UID 'lab101' can get their lab document at /labs/lab101.
     * @allow (update) - Authenticated user with UID 'lab101' can update their lab document at /labs/lab101.
     * @allow (delete) - Authenticated user with UID 'lab101' can delete their lab document at /labs/lab101.
     * @deny (create) - Authenticated user with UID 'patient123' cannot create a lab document at /labs/lab101.
     * @deny (get) - Authenticated user with UID 'patient123' cannot get the lab document at /labs/lab101.
     * @deny (update) - Authenticated user with UID 'patient123' cannot update the lab document at /labs/lab101.
     * @deny (delete) - Authenticated user with UID 'patient123' cannot delete the lab document at /labs/lab101.
     * @principle Enforces document ownership for all operations on lab data.
     */
    match /labs/{labId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user's ID matches the labId
      function isOwner(labId) {
        return isSignedIn() && request.auth.uid == labId;
      }

      // Helper function to check if the authenticated user is the existing owner
      function isExistingOwner(labId) {
        return isOwner(labId) && resource != null;
      }

      // Allow anyone to read the document if they are the owner
      allow get: if isOwner(labId);
      allow list: if isOwner(labId);

      // Allow create if the user is signed in and the labId matches the authenticated user's ID.
      // Also validate that the document ID matches the labId in the request.
      allow create: if isOwner(labId) && request.resource.data.id == labId;

      // Allow update if the user is signed in, the labId matches the authenticated user's ID,
      // and the document already exists. Enforce immutability of the 'id' field.
      allow update: if isExistingOwner(labId) && request.resource.data.id == resource.data.id;

      // Allow delete if the user is signed in, the labId matches the authenticated user's ID,
      // and the document already exists.
      allow delete: if isExistingOwner(labId);
    }

    /**
     * @description Manages access to ambulance service data. Only the ambulance service with the matching ID can read, update, or delete their own data.
     * @path /ambulanceServices/{ambulanceServiceId}
     * @allow (create) - Authenticated user with UID 'ambulance555' can create an ambulance service document at /ambulanceServices/ambulance555.
     * @allow (get) - Authenticated user with UID 'ambulance555' can get their ambulance service document at /ambulanceServices/ambulance555.
     * @allow (update) - Authenticated user with UID 'ambulance555' can update their ambulance service document at /ambulanceServices/ambulance555.
     * @allow (delete) - Authenticated user with UID 'ambulance555' can delete their ambulance service document at /ambulanceServices/ambulance555.
     * @deny (create) - Authenticated user with UID 'patient123' cannot create an ambulance service document at /ambulanceServices/ambulance555.
     * @deny (get) - Authenticated user with UID 'patient123' cannot get the ambulance service document at /ambulanceServices/ambulance555.
     * @deny (update) - Authenticated user with UID 'patient123' cannot update the ambulance service document at /ambulanceServices/ambulance555.
     * @deny (delete) - Authenticated user with UID 'patient123' cannot delete the ambulance service document at /ambulanceServices/ambulance555.
     * @principle Enforces document ownership for all operations on ambulance service data.
     */
    match /ambulanceServices/{ambulanceServiceId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user's ID matches the ambulanceServiceId
      function isOwner(ambulanceServiceId) {
        return isSignedIn() && request.auth.uid == ambulanceServiceId;
      }

      // Helper function to check if the authenticated user is the existing owner
      function isExistingOwner(ambulanceServiceId) {
        return isOwner(ambulanceServiceId) && resource != null;
      }

      // Allow anyone to read the document if they are the owner
      allow get: if isOwner(ambulanceServiceId);
      allow list: if isOwner(ambulanceServiceId);

      // Allow create if the user is signed in and the ambulanceServiceId matches the authenticated user's ID.
      // Also validate that the document ID matches the ambulanceServiceId in the request.
      allow create: if isOwner(ambulanceServiceId) && request.resource.data.id == ambulanceServiceId;

      // Allow update if the user is signed in, the ambulanceServiceId matches the authenticated user's ID,
      // and the document already exists. Enforce immutability of the 'id' field.
      allow update: if isExistingOwner(ambulanceServiceId) && request.resource.data.id == resource.data.id;

      // Allow delete if the user is signed in, the ambulanceServiceId matches the authenticated user's ID,
      // and the document already exists.
      allow delete: if isExistingOwner(ambulanceServiceId);
    }
  }
}